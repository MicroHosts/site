datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

//Users

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id            String    @id @default(cuid())
  name          String   @unique
  email         String   @unique
  emailVerified Boolean   @default(false)
  // image         String?
  // sessions      Session[]
  password      Password?
  token         VerificationToken?
  balance       Balance?
  info          UserInfo?
  hosts         OrderHost[]
  services      OrderService[]
  // services      Services[]
}

model UserInfo{
  id           String    @id @default(cuid())
  first_name   String
  second_name  String
  last_name    String
  phone_number String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
}

model Balance {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    amount    Int
}

model Password {
  id        String   @id @default(cuid())
  userId    String   @unique
  hashed    String
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  token      String   @unique
  expires    DateTime
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, token])
}

//Hosts
model Host{
  id          String @id @default(cuid())
  name        String
  cpu         String
  ram         String
  storage     String
  vimid       Int
  login       String
  ip          String
  password    String
  description String
  price       Int
  // status      HostStatus
  Order       OrderHost?
}

model OrderHost{
  id        String  @id @default(cuid())
  host      Host?    @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rentDate  DateTime
}

model Service{
    id          String @id @default(cuid())
    name        String
    price       Int
    description String
    Order       OrderService[]
}

model OrderService{
  id        String    @id @default(cuid())
  service   Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  rentDate  DateTime
}
// //TODO создать отдельный services для пользователя, чтобы указывать период оплаты
// model Services{
//   id          String    @id @default(cuid())
//   name        String
//   description String    @db.LongText
//   price       String
//   category    Category
//   host        Host?     @relation(fields: [hostId], references: [id], onDelete: Cascade)
//   hostId      String?   @unique
//   userId      String?   @unique
//   user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

//Cupon
model Coupons{
  id      String @id @default(cuid())
  name    String
  percent Int
  limit   Int
}

// enum HostStatus {
//   ACTIVE
//   RENTED
//   DISABLED
// }


// enum Category {
//   HOST
//   SERVICE
// }
